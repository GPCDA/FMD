
1. Installation
Download Repository

cd ~/
git clone https://github.com/prof-alexandre-maciel/fmdev.git


1.1 Yarn

curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -

echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list

sudo apt update

sudo apt install yarn


1.2 Node Version Manager

sudo apt update

curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | sh

source ~/.nvm/nvm.sh

nvm install 13.9.0

nvm use 13.9.0

1.3 Check installation:

node --version

npm --version

1.4 React.js

cd ~/fmdev/frontend

yarn install

1.5 Configure node memory limit to increase build
export NODE_OPTIONS=--max_old_space_size=3072

1.6 build node

cd ~/fmdev/frontend

yarn build

1.7 - Rollback Max Space After Build
export NODE_OPTIONS=--max_old_space_size=512


1.8 Nginx

sudo apt update

sudo apt install nginx

1.9 Adjusting the Firewall:

sudo ufw allow 'Nginx Full'

1.10  Checking your Web Server

At the end of the installation process, Ubuntu 18.04 starts Nginx. The web server should already be up and running.

We can check with the systemd init system to make sure the service is running by typing:


systemctl status nginx


/*
SE DER ERRO EXISTE A POSSIBILIDADE DO APACHE SPARK RODAR NA PORTA 80
sudo service apache2 stop
sudo systemctl restart nginx
systemctl status nginx
*/


1.10.1 Replace file /etc/nginx/sites-available/default to this script:

nano /etc/nginx/sites-available/default 


server {
    listen 80 default_server;
    listen [::]:80 default_server; 
    root /var/www/html;
    index index.html;

    server_name _;

    location / {
        try_files $uri $uri/ /index.html;
        add_header Cache-Control "no-cache";
    }

    location /static {
        expires 1y;
        add_header Cache-Control "public";
    }

    location /api {
        include proxy_params;
        proxy_pass http://127.0.0.1:5000;
    }
}


1.10.2 Delete old data from default Nginx HTML Path:

sudo rm -rf /var/www/html/*

1.10.3 Copy frontend build to HTML Path:
sudo cp -R ~/fmdev/frontend/build/* /var/www/html


1.11 Python prerequisites

sudo apt-get install build-essential checkinstall

sudo apt-get install libreadline-gplv2-dev libncursesw5-dev libssl-dev \
    libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev libffi-dev zlib1g-dev

1.12

cd /usr/src

sudo wget https://www.python.org/ftp/python/3.7.6/Python-3.7.6.tgz

1.13 Now extract the downloaded package.
sudo tar xzf Python-3.7.6.tgz

1.14 Use below set of commands to compile Python source code on your system using altinstall.

cd Python-3.7.6

sudo ./configure --enable-optimizations

sudo make altinstall



1.15  Check version

python3.7 -V

1.16 Install and Activate Virtualenv

cd backend

python3.7 -m venv venv

source venv/bin/activate

1.17 - pip install -r requirements.txt

1.18 - Configure Gunicorn as Service:

nano /etc/systemd/system/fmdev.service

Copy and Paste this code on fmdev.service. Remember to check if FMDEV path is correct.

[Unit]
Description=FMDEV Service
After=network.target

[Service]
User=root
WorkingDirectory=/root/fmdev/backend
Environment="PATH=/root/fmdev/backend/venv/bin"
ExecStart=/root/fmdev/backend/venv/bin/gunicorn -b 127.0.0.1:5000 "run:create_app('config')"
Restart=always

[Install]
WantedBy=multi-user.target


1.19 Reload Daemons:
sudo systemctl daemon-reload

1.20 Enable Service:
sudo systemctl start fmdev

1.21 - Check if service its running:
sudo systemctl status fmdev


/*
PARA INICIAR O FRONT - end

cd frontend
yarn install
yarn start

*/


/* Se faltar o :      
from _bz2 import BZ2Compressor, BZ2Decompressor
ModuleNotFoundError: No module named '_bz2'

bz2 is an optional dependency of python,
but sklearn assumes your python installation has this module. 


sudo apt-get install libbz2-dev

dar um rebuild no python 

cd Python-3.7.6

sudo ./configure --enable-optimizations

sudo make altinstall

*/

/*
LEVANTAR O BANCO DE DADOS

PASSO 1
sudo apt update
sudo apt install postgresql

PASSO 2
sudo -i -u postgres
psql

CREATE USER root WITH PASSWORD '1234';
ALTER USER root WITH Superuser;

PASSO 3: CRIAR UM ARQUIVO .env.development ou .env na raiz backend
DB_HOST=localhost
DB_USER=root
DB_PORT=5432
DB_PWD=1234
DB_NAME=fmdev
*/


/*


  git config --global user.email "robertosapaiva@hotmail.com"
  git config --global user.name "robertosa13"

  checar
  git config --global --edit


echo "# FMDEV-ROBERTO" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote set-url origin https://github.com/robertosa13/FMDEV-ROBERTO.git
git push -u origin main


git init
git add --all
git commit -m "Django rest no cluster"
git remote add origin https://github.com/robertosa13/FMDEV-ROBERTO.git
git branch -M main
git push -u origin main
git push --force origin main


quando upar try_files
git init

*/

# To activate this environment, use
#
#     $ conda activate py37
#
# To deactivate an active environment, use
#
#     $ conda deactivate


## create empty environment
#conda create -n py37
## activate
#conda activate py37
## use x86_64 architecture channel(s)
#conda config --env --set subdir osx-64
## install python, numpy, etc. (add more packages here...)
#conda install python=3.7

#source env/bin/activate
# python manage.py startapp predict
# pytho


## DJANGO
#source venv/bin/activate     
#python manage.py runserver    
#python manage.py makemigrations
#python manage.py migrate
#roberto 9488
## 